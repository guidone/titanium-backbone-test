// Generated by CoffeeScript 1.4.0
(function() {
  var Database;

  Database = (function() {

    function Database(table_name, auto_increment) {
      this.table_name = table_name;
      this.properties = [];
      this.columns = [];
      this.auto_increment = auto_increment;
      if (auto_increment) {
        this.auto_increment = false;
      } else {
        this.auto_increment = true;
        this.properties.push({
          name: 'id',
          type: 'INTEGER PRIMARY KEY AUTOINCREMENT'
        });
        this.columns.push('id');
      }
      this.properties.push({
        name: 'created_at',
        type: 'datetime'
      });
      this.properties.push({
        name: 'updated_at',
        type: 'datetime'
      });
      this.columns.push('created_at');
      this.columns.push('updated_at');
      if (Ti.Platform.osname === 'android') {
        this.db = Ti.Database.install('/myapp.db', 'my_app');
      } else {
        this.db = Ti.Database.install('myapp.db', 'my_app');
      }
      this.initialize();
    }

    Database.prototype.property = function(name, type) {
      if (this.auto_increment && name === 'id') {
        return;
      }
      if (name !== 'updated_at' && name !== 'created_at') {
        this.properties.push({
          name: name,
          type: type
        });
        return this.columns.push(name);
      }
    };

    Database.prototype.initialize = function() {
      return this.init();
    };

    Database.prototype.init = function() {
      var add, data, i, sql, table_name, table_type, _i, _len, _ref;
      sql = "CREATE TABLE IF NOT EXISTS " + this.table_name + " (";
      _ref = this.properties;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        data = _ref[i];
        table_name = data.name;
        table_type = data.type;
        add = table_name + " " + table_type;
        if (i === 0) {
          sql += add;
        }
        if (i > 0) {
          sql += "," + add;
        }
      }
      sql += ");";
      return this.db.execute(sql);
    };

    Database.prototype.transaction = function(fn) {
      var res;
      if (Ti.Platform.osname !== 'android') {
        this.db.execute("BEGIN");
      }
      res = fn();
      if (res && Ti.Platform.osname !== 'android') {
        return this.db.execute("COMMIT");
      } else if (Ti.Platform.osname !== 'android') {
        return this.db.execute("ROLLBACK");
      }
    };

    Database.prototype.create = function(data) {
      var name, self, _i, _len, _ref,
        _this = this;
      self = new Object();
      if (data) {
        _ref = this.columns;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          self[name] = data[name];
        }
      }
      self.save = function() {
        var p, params, _j, _len1, _ref1;
        params = new Object();
        _ref1 = _this.columns;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          params[p] = self[p];
        }
        if (data && data.id && _this.find_by_id(data.id)) {
          return _this.update(params);
        } else {
          return _this.save(params);
        }
      };
      return self;
    };

    Database.prototype.save = function(params) {
      var columns, data, id, name, sql, values, _i, _len, _ref;
      if (!params.created_at) {
        params.created_at = '';
      }
      if (!params.updated_at) {
        params.updated_at = '';
      }
      values = [];
      columns = [];
      data = [];
      _ref = this.columns;
      for (id = _i = 0, _len = _ref.length; _i < _len; id = ++_i) {
        name = _ref[id];
        if (this.auto_increment && name === 'id') {
          continue;
        }
        columns.push(name);
        if (name === 'created_at' || name === 'updated_at') {
          values.push("datetime('now', 'localtime')");
        } else {
          values.push('?');
          if (params[name]) {
            data.push(params[name]);
          } else {
            data.push(null);
          }
        }
      }
      sql = "INSERT INTO " + this.table_name + "(" + columns.join(',') + ") VALUES (" + values.join(',') + ");";
      return this.db.execute(sql, data);
    };

    Database.prototype.read = function(sql, data) {
      var name, result, resultSet, results, _i, _len, _ref;
      if (Ti.Platform.osname !== 'android') {
        this.db.execute("BEGIN");
      }
      if (data) {
        resultSet = this.db.execute(sql, data);
      } else {
        resultSet = this.db.execute(sql);
      }
      results = [];
      while (resultSet.isValidRow()) {
        result = {};
        _ref = this.columns;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          result[name] = resultSet.fieldByName(name);
        }
        result.save = this._update(result);
        result.destroy = this._destroy(result);
        results.push(result);
        resultSet.next();
      }
      resultSet.close();
      if (Ti.Platform.osname !== 'android') {
        this.db.execute("COMMIT");
      }
      return results;
    };

    Database.prototype.find = function(params) {
      var key, keys, orderby, sql, vals, value, wheres, _i, _len;
      sql = "SELECT * FROM " + this.table_name;
      keys = [];
      vals = [];
      orderby = "";
      for (key in params) {
        value = params[key];
        if (key === 'order') {
          orderby = " ORDER BY " + value;
        } else {
          keys.push(key);
          vals.push(value);
        }
      }
      if (keys.length > 0) {
        sql += " WHERE ";
        wheres = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          wheres.push(key + " = ?");
        }
        sql += wheres.join(',');
      }
      sql += orderby;
      return this.read(sql, vals);
    };

    Database.prototype.first = function() {
      var data, sql;
      sql = "SELECT * FROM " + this.table_name + " ORDER BY id DESC LIMIT 1";
      data = this.read(sql);
      return data[0];
    };

    Database.prototype.last = function() {
      var data, sql;
      sql = "SELECT * FROM " + this.table_name + " ORDER BY id ASC LIMIT 1";
      data = this.read(sql);
      return data[0];
    };

    Database.prototype.all = function() {
      var sql;
      sql = "SELECT * FROM " + this.table_name + " ORDER BY id DESC";
      return this.read(sql);
    };

    Database.prototype.find_by_id = function(id) {
      var data, sql;
      sql = "SELECT * FROM " + this.table_name + " WHERE id = ?";
      data = this.read(sql, id);
      return data[0];
    };

    Database.prototype.create_if_not_exist = function(params) {
      var data;
      data = this.find_by_id(params.id);
      if (data) {
        return false;
      } else {
        return this.save(params);
      }
    };

    Database.prototype.update = function(params) {
      var id, key, setter, sql, value, values;
      if (!params.updated_at) {
        params.updated_at = '';
      }
      sql = "UPDATE " + this.table_name + " ";
      setter = [];
      values = [];
      for (key in params) {
        value = params[key];
        if (key === 'id') {
          id = value;
          continue;
        } else if (key === 'updated_at') {
          setter.push(key + " = datetime('now', 'localtime')");
        } else {
          setter.push(key + " = ?");
          values.push(value);
        }
      }
      values.push(id);
      sql += " SET " + setter.join(',');
      sql += " WHERE id = ?";
      return this.db.execute(sql, values);
    };

    Database.prototype.destroy = function(params) {
      var sql;
      sql = "DELETE FROM " + this.table_name + " WHERE id = ?";
      return this.db.execute(sql, params.id);
    };

    Database.prototype._update = function(data) {
      var self,
        _this = this;
      self = data;
      return function() {
        var p, params, _i, _len, _ref;
        params = new Object();
        _ref = _this.columns;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          params[p] = self[p];
        }
        _this.update(params);
      };
    };

    Database.prototype._destroy = function(data) {
      var self,
        _this = this;
      self = data;
      return function() {
        _this.destroy(data);
      };
    };

    return Database;

  })();

  module.exports = Database;

}).call(this);
